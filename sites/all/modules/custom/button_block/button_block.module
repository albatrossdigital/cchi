<?php

/**
 * @file
 * Provides configurable button blocks.
 */

function button_block_menu() {
  module_load_include('inc', 'button_block', 'button_block.admin');
  return _button_block_menu();
}
function button_block_block_info() {
  module_load_include('inc', 'button_block', 'button_block.admin');
  return _button_block_block_info();
}
function button_block_block_configure($delta = '') {
  module_load_include('inc', 'button_block', 'button_block.admin');
  return _button_block_block_configure($delta);
}
function button_block_block_save($delta = '', $edit = array()) {
  module_load_include('inc', 'button_block', 'button_block.admin');
  return _button_block_block_save($delta, $edit);
}
function button_block_form_block_admin_display_form_alter(&$form, $form_state) {
  module_load_include('inc', 'button_block', 'button_block.admin');
  return _button_block_form_block_admin_display_form_alter($form, $form_state);
}

/**
 * Implements hook_block_view().
 */
function button_block_block_view($delta = '') {
  $config = button_block_get_config($delta);
  $data = button_block_build_block($config);
  return $data;
}

/**
 * Returns the configuration for the requested block delta.
 *
 * @param $delta
 *   string The delta that uniquely identifies the block in the block system. If
 *   not specified, the default configuration will be returned.
 * @return
 *   array An associated array of configuration options.
 */
function button_block_get_config($delta = NULL) {
  $config = array(
    'delta'       => $delta,
    'admin_title' => '',
    'button_text' => '',
    'button_link' => '',
    'button_classes' => '',
  );

  // Get the block configuration options.
  if ($delta) {
    static $blocks;
    if (!isset($blocks)) {
      $blocks = module_invoke_all('button_block_blocks');
    }
    if (!empty($blocks[$delta])) {
      // Merge the default values.
      $config = $blocks[$delta] + $config;
      // Set the delta.
      $config['delta'] = $delta;
      // Flag the block as exported.
      $config['exported_to_code'] = TRUE;
    }

    $config['admin_title'] = variable_get("button_block_{$delta}_admin_title", $config['admin_title']);
    $config['button_text'] = variable_get("button_block_{$delta}_button_text", $config['button_text']);
    $config['button_link'] = variable_get("button_block_{$delta}_button_link", $config['button_link']);
    $config['button_classes'] = variable_get("button_block_{$delta}_button_classes", $config['button_classes']);
  }

  return $config;
}

/**
 * Function returns themed block
 */
function button_block_build_block($config) {
  if(empty($config['button_text'])) {
    $config['button_text'] = ' ';
  }
  if(!empty($config['button_classes'])) {
    /*if(strpos($config['button_classes'], '-arrow') > 0) {
      $arrow = TRUE;
      $config['button_text'] .= '<span>arrow</span>';
    }*/
    $config['button_classes'] .= ' button-block-link';
  }
  else {
    $config['button_classes'] = 'button-block-link';
  }
  
  $classes = explode(' ', $config['button_classes']);
  
  $options = array(
    'attributes' => array(
      'class' => $classes,
    ),
    //'html' => (($arrow) ? TRUE : FALSE),
  );
  $output = array();
  $output['content'] = '<div class="button-block-wrapper ' . $config['button_classes'] . '">' . l($config['button_text'], $config['button_link'], $options) . '</div>';
  
  return $output;
} 
